#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import os
import sys
import configparser
import argparse
import logging

import boto3
import pyotp
import argcomplete


# Logging config
logger = logging.getLogger('aws_2fa')
ch = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

AWS_ACCESS_KEY_ID_ENV = 'AWS_ACCESS_KEY_ID'
AWS_SECRET_ACCESS_KEY_ENV = 'AWS_SECRET_ACCESS_KEY'
AWS_SESSION_TOKEN_ENV = 'AWS_SESSION_TOKEN'
CONFIG_FILE_PATH = '~/.aws/aws_2fa'
AWS_CONFIG_FILE_PATH = '~/.aws/credentials'
HELP_MESSAGE = f"""
Generate MFA authenticated AWS credentials for CLI exporting.

If you put an MFA base32 token to the '--mfa_token' argument,
your MFA code will be autogenerated. Within the AWS the token is
available only when you create a Virtual MFA device for AWS user.

Alternatively, you can use your existing Virtual MFA device and provide
the code with the '--mfa_code' parameter.

Use '--save' to save your configuration e.g. mfa_arn, role_arn,
or mfa_token to '{CONFIG_FILE_PATH}' file, so next time you need only fill
the '--profile' parameter, the rest will be taken from the config file.
The CLI arguments have higher priority than the config file.
"""


def resolve_config_path(config_path):
    return os.path.expanduser(config_path)


def get_aws_profiles(prefix, parsed_args, **kwargs):
    aws_config = configparser.ConfigParser()
    aws_config_path = resolve_config_path(AWS_CONFIG_FILE_PATH)
    with open(aws_config_path, "r") as f:
        aws_config_content = f.read()
    aws_config.read_string(aws_config_content)
    profiles = aws_config.sections()
    return (profile for profile in profiles if profile.startswith(prefix))


def get_cli_args():
    parser = argparse.ArgumentParser(description=HELP_MESSAGE)
    parser.add_argument('--profile', '-p', dest='profile',
                        action='store', default='default',
                        help="AWS profile from '~/.aws/credentials'").completer = get_aws_profiles
    parser.add_argument('--role_arn', '-r', dest='role_arn',
                        action='store',
                        help="IAM role to assume using " +
                        "provided profile credentials")
    parser.add_argument('--mfa_arn', '-ma', dest='mfa_arn',
                        action='store',
                        help='MFA token to autogenerate your MFA code)')
    mfa_token_group = parser.add_mutually_exclusive_group()
    mfa_token_group.add_argument('--mfa_token', '-mt', dest='mfa_token',
                                 action='store',
                                 help='MFA token to "+ \
                                    "autogenerate your MFA code)')
    mfa_token_group.add_argument('--mfa_code', '-mc', dest='mfa_code',
                                 action='store',
                                 help='MFA code from your device')
    parser.add_argument('--session_duration', '-sd', dest='session_duration',
                        action='store', default=3600, type=int,
                        help='How long your credentials will be valid')
    parser.add_argument('--save', '-s', dest='save_in_file',
                        action='store_true',
                        help="Save the configuration " +
                        f"for that profile to '{CONFIG_FILE_PATH}'")
    parser.add_argument('--quiet', dest='quiet',
                        action='store_true',
                        help="Do not print info output.")

    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    return vars(args)


def get_stored_configuration():
    stored_config = configparser.ConfigParser()
    custom_config_path = resolve_config_path(CONFIG_FILE_PATH)
    custom_config_found = os.path.exists(custom_config_path)
    if custom_config_found:
        with open(custom_config_path, 'r') as f:
            custom_config = f.read()
        stored_config.read_string(custom_config)
    else:
        logger.warning(f"Your custom config file '{custom_config_path}'" +
                       "does not exist! Trying to use cli args...")
    return stored_config


def get_param(param, cli_args, stored_configs, required=True):
    "return param value from cli args if absent try to get from config file"
    param_value = None
    param_not_found = False
    if cli_args[param] is not None:
        param_value = cli_args[param]
        logger.info(f"Using '{param}' from cli args...")
    else:
        try:
            param_value = stored_configs.get(section=cli_args['profile'],
                                             option=param)
            logger.info(f"Using '{param}' from " +
                        f"config file '{CONFIG_FILE_PATH}'...")
        except (configparser.NoSectionError):
            param_not_found = True
            logger.warning(f"Profile '{cli_args['profile']}' is not found in " +
                           f"'{CONFIG_FILE_PATH}' file. Make sure you are " +
                           "using '--save' option to generate the " +
                           "configuration file first ")

        except (configparser.NoOptionError):
            param_not_found = True
            logger.warning(f"Parameter '{param}' is not found in " +
                           f"'{CONFIG_FILE_PATH}' file. You can rewrite the " +
                           " configuration file using '--save' option.")
        # Raise exeption only if required param is missing
        if required and param_not_found:
            logger.critical(f"The parameter '{param}' is required!")
            raise ValueError

    return param_value


def generate_mfa_code(mfa_token):
    try:
        mfa_code = pyotp.TOTP(mfa_token).now()
    except Exception:
        logger.critical("Can not generate the mfa token code, " +
                        "check the mfa token is correct!")
        exit()
    return str(mfa_code)


def get_mfa_code(cli_args, stored_configs):
    if cli_args['mfa_code']:
        mfa_code = cli_args['mfa_code']
        logger.info("Using provided MFA code...")
    else:
        logger.info("Generating MFA code from MFA token...")
        mfa_token = get_param('mfa_token', cli_args, stored_configs)
        mfa_code = generate_mfa_code(mfa_token)
    return mfa_code


def get_mfa_autorized_credetials(profile, mfa_arn, mfa_code, session_duration):
    base_session = boto3.Session(profile_name=profile)
    logger.info("Generating MFA authentificated session credentials...")
    mfa_authorized_credentials = base_session.client('sts').get_session_token(
        DurationSeconds=session_duration,
        SerialNumber=mfa_arn,
        TokenCode=mfa_code
    )['Credentials']
    return mfa_authorized_credentials


def get_assumed_credetials(profile, role_arn, mfa_arn,
                           mfa_code, session_duration):
    base_session = boto3.Session(profile_name=profile)
    logger.info("Generating assumed role session credentials...")
    assumed_role_credentials = base_session.client('sts').assume_role(
        RoleArn=role_arn,
        RoleSessionName=profile,
        DurationSeconds=session_duration,
        SerialNumber=mfa_arn,
        TokenCode=mfa_code
    )['Credentials']
    return assumed_role_credentials


def generate_output(credentials):
    access_key = credentials['AccessKeyId']
    secret_access_key = credentials['SecretAccessKey']
    session_token = credentials['SessionToken']

    print(f"# Copy the commands to cli for using in unix terminal:")
    print(f"export AWS_ACCESS_KEY_ID='{access_key}'")
    print(f"export AWS_SECRET_ACCESS_KEY='{secret_access_key}'")
    print(f"export AWS_SESSION_TOKEN='{session_token}'")


def save_configuration(profile, params, stored_configs):
    config_path = resolve_config_path(CONFIG_FILE_PATH)
    with open(config_path, 'w') as f:
        if not profile in stored_configs.sections():
            stored_configs.add_section(profile)
        for param in params:
            if params[param]:
                stored_configs.set(profile, param, str(params[param]))
        stored_configs.write(f)


if __name__ == "__main__":
    # Show help if there are no arguments
    if len(sys.argv) == 1:
        sys.argv.append('-h')

    cli_args = get_cli_args()
    stored_configs = get_stored_configuration()
    # set log level
    if cli_args['quiet']:
        logger.setLevel(logging.ERROR)
    else:
        logger.setLevel(logging.INFO)

    # Set parameters
    params_to_save = dict()
    if cli_args['mfa_token']:
        params_to_save['mfa_token'] = cli_args['mfa_token']
    mfa_code = get_mfa_code(cli_args, stored_configs)
    params_to_save['mfa_arn'] = get_param('mfa_arn',
                                          cli_args,
                                          stored_configs,
                                          required=True)
    params_to_save['session_duration'] = get_param('session_duration',
                                                   cli_args,
                                                   stored_configs,
                                                   required=False)
    params_to_save['role_arn'] = get_param('role_arn',
                                           cli_args,
                                           stored_configs,
                                           required=False)

    # Generate credentials
    if params_to_save['role_arn']:
        credentials = get_assumed_credetials(profile=cli_args['profile'],
                                             role_arn=params_to_save['role_arn'],
                                             mfa_arn=params_to_save['mfa_arn'],
                                             mfa_code=mfa_code,
                                             session_duration=params_to_save['session_duration'])
    else:
        credentials = get_mfa_autorized_credetials(profile=cli_args['profile'],
                                                   mfa_arn=params_to_save['mfa_arn'],
                                                   mfa_code=mfa_code,
                                                   session_duration=params_to_save['session_duration'])
    if cli_args['save_in_file']:
        save_configuration(cli_args['profile'], params_to_save, stored_configs)
    generate_output(credentials)
